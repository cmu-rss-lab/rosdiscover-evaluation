import families/ROSFam.acme;
system _code_experiments_recovery_subjects_husky_recovered_architecture : ROSFam = new ROSFam extended with {
   component move_base : ROSNodeCompT = new ROSNodeCompT extended with {
             port _move_base_goal_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/PoseStamped";
        property topic = "/move_base/goal";
    };
    
     port _move_base_NavfnROS_plan_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/Path";
        property topic = "/move_base/NavfnROS/plan";
    };
    
     port _move_base_global_costmap_costmap_updates_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/OccupancyGridUpdate";
        property topic = "/move_base/global_costmap/costmap_updates";
    };
    
     port _move_base_DWAPlannerROS_local_plan_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/Path";
        property topic = "/move_base/DWAPlannerROS/local_plan";
    };
    
     port _move_base_DWAPlannerROS_global_plan_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/Path";
        property topic = "/move_base/DWAPlannerROS/global_plan";
    };
    
     port _move_base_global_costmap_costmap_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/OccupancyGrid";
        property topic = "/move_base/global_costmap/costmap";
    };
    
     port _cmd_vel_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/Twist";
        property topic = "/cmd_vel";
    };
    
     port _move_base_local_costmap_costmap_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/OccupancyGrid";
        property topic = "/move_base/local_costmap/costmap";
    };
    
     port _move_base_local_costmap_costmap_updates_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/OccupancyGridUpdate";
        property topic = "/move_base/local_costmap/costmap_updates";
    };
    
     port _move_base_current_goal_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/PoseStamped";
        property topic = "/move_base/current_goal";
    };
    
     port _move_base_global_costmap_footprint_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "geometry_msgs/Polygon";
        property topic = "/move_base/global_costmap/footprint";
    };
    
     port _move_base_simple_goal_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "geometry_msgs/PoseStamped";
        property topic = "/move_base_simple/goal";
    };
    
     port _move_base_local_costmap_footprint_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "geometry_msgs/Polygon";
        property topic = "/move_base/local_costmap/footprint";
    };
    
     port _odom_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "nav_msgs/Odometry";
        property topic = "/odom";
    };
    
     port _move_base_NavfnROS_make_plan_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "nav_msgs/GetPlan";
        property name : string = "/move_base/NavfnROS/make_plan";
        property args : string = "";
    };
    
     port _move_base_clear_costmaps_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/move_base/clear_costmaps";
        property args : string = "";
    };
    
     port _move_base_make_plan_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "nav_msgs/GetPlan";
        property name : string = "/move_base/make_plan";
        property args : string = "";
    };
    
    port _move_base_srvr: ActionServerPortT = new ActionServerPortT extended with {
        property action_type : string = "move_base_msgs/MoveBaseAction";
    };
    
        property name = "move_base";
        property launchedBy = "/ros_ws/src/husky/husky_navigation/launch/move_base.launch";
    };
    
   component amcl : ROSNodeCompT = new ROSNodeCompT extended with {
             port _amcl_pose_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/PoseWithCovarianceStamped";
        property topic = "/amcl_pose";
    };
    
     port _particlecloud_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/PoseArray";
        property topic = "/particlecloud";
    };
    
     port _base_scan_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "sensor_msgs/LaserScan";
        property topic = "/base_scan";
    };
    
     port _map_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "nav_msgs/OccupancyGrid";
        property topic = "/map";
    };
    
     port _scan_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "sensor_msgs/LaserScan";
        property topic = "/scan";
    };
    
     port _initialpose_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "geometry_msgs/PoseWithCovarianceStamped";
        property topic = "/initialpose";
    };
    
     port _set_map_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "nav_msgs/SetMap";
        property name : string = "/set_map";
        property args : string = "";
    };
    
     port _request_nomotion_update_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/request_nomotion_update";
        property args : string = "";
    };
    
     port _global_localization_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/global_localization";
        property args : string = "";
    };
    
     port _static_map_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/static_map";
        property svc_type : string = "todo/service";
        property persistency : ServicePersistencyT = non-persistent;
    };
    
        property name = "amcl";
        property launchedBy = "/ros_ws/src/husky/husky_navigation/launch/amcl.launch";
    };
    
   component map_server : ROSNodeCompT = new ROSNodeCompT extended with {
             port _map_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/OccupancyGrid";
        property topic = "/map";
    };
    
     port _map_metadata_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/MapMetaData";
        property topic = "/map_metadata";
    };
    
     port _static_map_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "nav_msgs/GetMap";
        property name : string = "/static_map";
        property args : string = "";
    };
    
        property name = "map_server";
        property launchedBy = "/ros_ws/src/husky/husky_navigation/launch/amcl_demo.launch";
    };
    
   component base_controller_spawner : ROSNodeCompT = new ROSNodeCompT extended with {
             port _controller_manager_load_controller_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/controller_manager/load_controller";
        property svc_type : string = "controller_manager_msgs/LoadController";
        property persistency : ServicePersistencyT = non-persistent;
    };
    
     port _controller_manager_switch_controller_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/controller_manager/switch_controller";
        property svc_type : string = "controller_manager_msgs/SwitchController";
        property persistency : ServicePersistencyT = non-persistent;
    };
    
     port _controller_manager_unload_controller_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/controller_manager/unload_controller";
        property svc_type : string = "controller_manager_msgs/UnloadController";
        property persistency : ServicePersistencyT = non-persistent;
    };
    
        property name = "base_controller_spawner";
        property launchedBy = "/ros_ws/src/husky/husky_control/launch/control.launch";
    };
    
   component twist_mux : ROSNodeCompT = new ROSNodeCompT extended with {
             port _twist_mux_cmd_vel_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/Twist";
        property topic = "/twist_mux/cmd_vel";
    };
    
     port _cmd_vel_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "any";
        property topic = "/cmd_vel";
    };
    
     port _twist_marker_server_cmd_vel_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "any";
        property topic = "/twist_marker_server/cmd_vel";
    };
    
     port _joy_teleop_cmd_vel_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "any";
        property topic = "/joy_teleop/cmd_vel";
    };
    
     port _e_stop_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "any";
        property topic = "/e_stop";
    };
    
        property name = "twist_mux";
        property launchedBy = "/ros_ws/src/husky/husky_control/launch/control.launch";
    };
    
   component gazebo : ROSNodeCompT = new ROSNodeCompT extended with {
             port _gazebo_link_states_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "gazebo_msgs/LinkState";
        property topic = "/gazebo/link_states";
    };
    
     port _navsat_vel_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/Vector3Stamped";
        property topic = "/navsat/vel";
    };
    
     port _gazebo_model_states_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "gazebo_msgs/ModelStates";
        property topic = "/gazebo/model_states";
    };
    
     port _imu_data_bias_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "sensor_msgs/Imu";
        property topic = "/imu/data/bias";
    };
    
     port _odom_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/Odometry";
        property topic = "/odom";
    };
    
     port _joint_states_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "sensor_msgs::JointState";
        property topic = "/joint_states";
    };
    
     port _navsat_fix_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "sensor_msgs/NavSatFix";
        property topic = "/navsat/fix";
    };
    
     port _imu_data_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "sensor_msgs/Imu";
        property topic = "/imu/data";
    };
    
     port _cmd_vel_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "geometry_msgs/Twist";
        property topic = "/cmd_vel";
    };
    
     port _gazebo_set_link_state_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "gazebo_msgs/LinkState";
        property topic = "/gazebo/set_link_state";
    };
    
     port _gazebo_set_model_state_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "gazebo_msgs/ModelState";
        property topic = "/gazebo/set_model_state";
    };
    
     port _gazebo_delete_model_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/DeleteModel";
        property name : string = "/gazebo/delete_model";
        property args : string = "";
    };
    
     port _controller_manager_switch_controller_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "controller_manager_msgs/SwitchController";
        property name : string = "/controller_manager/switch_controller";
        property args : string = "";
    };
    
     port _controller_manager_load_controller_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "controller_manager_msgs/LoadController";
        property name : string = "/controller_manager/load_controller";
        property args : string = "";
    };
    
     port _gazebo_get_physics_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetPhysicsProperties";
        property name : string = "/gazebo/get_physics_properties";
        property args : string = "";
    };
    
     port _gazebo_set_link_state_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetLinkState";
        property name : string = "/gazebo/set_link_state";
        property args : string = "";
    };
    
     port _gazebo_set_model_state_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SetModelState";
        property name : string = "/gazebo/set_model_state";
        property args : string = "";
    };
    
     port _gazebo_set_physics_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SetPhysicsProperties";
        property name : string = "/gazebo/set_physics_properties";
        property args : string = "";
    };
    
     port _gazebo_get_model_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetModelProperties";
        property name : string = "/gazebo/get_model_properties";
        property args : string = "";
    };
    
     port _imu_data_set_rate_bias_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "hector_gazebo_plugins/SetBias";
        property name : string = "/imu/data/set_rate_bias";
        property args : string = "";
    };
    
     port _imu_datacalibrate_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/imu/datacalibrate";
        property args : string = "";
    };
    
     port _gazebo_reset_world_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/gazebo/reset_world";
        property args : string = "";
    };
    
     port _gazebo_unpause_physics_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/gazebo/unpause_physics";
        property args : string = "";
    };
    
     port _gazebo_set_link_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SetLinkProperties";
        property name : string = "/gazebo/set_link_properties";
        property args : string = "";
    };
    
     port _gazebo_get_joint_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetJointProperties";
        property name : string = "/gazebo/get_joint_properties";
        property args : string = "";
    };
    
     port _gazebo_set_light_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SetLightProperties";
        property name : string = "/gazebo/set_light_properties";
        property args : string = "";
    };
    
     port _controller_manager_unload_controller_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "controller_manager_msgs/UnloadController";
        property name : string = "/controller_manager/unload_controller";
        property args : string = "";
    };
    
     port _gazebo_get_world_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetWorldProperties";
        property name : string = "/gazebo/get_world_properties";
        property args : string = "";
    };
    
     port _gazebo_set_joint_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SetJointProperties";
        property name : string = "/gazebo/set_joint_properties";
        property args : string = "";
    };
    
     port _gazebo_apply_body_wrench_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/ApplyBodyWrench";
        property name : string = "/gazebo/apply_body_wrench";
        property args : string = "";
    };
    
     port _controller_manager_list_controller_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "controller_manager_msgs/ListControllers";
        property name : string = "/controller_manager/list_controller";
        property args : string = "";
    };
    
     port _controller_manager_list_controller_types_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "controller_manager_msgs/ListControllerTypes";
        property name : string = "/controller_manager/list_controller_types";
        property args : string = "";
    };
    
     port _gazebo_get_light_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetLightProperties";
        property name : string = "/gazebo/get_light_properties";
        property args : string = "";
    };
    
     port _imu_data_set_accel_bias_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "hector_gazebo_plugins/SetBias";
        property name : string = "/imu/data/set_accel_bias";
        property args : string = "";
    };
    
     port _gazebo_reset_simulation_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/gazebo/reset_simulation";
        property args : string = "";
    };
    
     port _gazebo_spawn_sdf_model_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SpawnModel";
        property name : string = "/gazebo/spawn_sdf_model";
        property args : string = "";
    };
    
     port _gazebo_apply_joint_effort_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/ApplyJointEffort";
        property name : string = "/gazebo/apply_joint_effort";
        property args : string = "";
    };
    
     port _gazebo_clear_joint_forces_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/JointRequest";
        property name : string = "/gazebo/clear_joint_forces";
        property args : string = "";
    };
    
     port _gazebo_set_model_configuration_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SetModelConfiguration";
        property name : string = "/gazebo/set_model_configuration";
        property args : string = "";
    };
    
     port _controller_manager_reload_controller_libraries_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "controller_manager_msgs/ReloadControllerLibraries";
        property name : string = "/controller_manager/reload_controller_libraries";
        property args : string = "";
    };
    
     port _gazebo_clear_body_wrenches_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/BodyRequest";
        property name : string = "/gazebo/clear_body_wrenches";
        property args : string = "";
    };
    
     port _gazebo_delete_light_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/DeleteLight";
        property name : string = "/gazebo/delete_light";
        property args : string = "";
    };
    
     port _gazebo_get_model_state_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetModelState";
        property name : string = "/gazebo/get_model_state";
        property args : string = "";
    };
    
     port _gazebo_get_link_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetLinkProperties";
        property name : string = "/gazebo/get_link_properties";
        property args : string = "";
    };
    
     port _gazebo_get_link_state_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetLinkState";
        property name : string = "/gazebo/get_link_state";
        property args : string = "";
    };
    
     port _gazebo_spawn_urdf_model_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SpawnModel";
        property name : string = "/gazebo/spawn_urdf_model";
        property args : string = "";
    };
    
     port _gazebo_pause_physics_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/gazebo/pause_physics";
        property args : string = "";
    };
    
        property name = "gazebo";
        property launchedBy = "/ros_ws/src/gazebo_ros_pkgs/gazebo_ros/launch/empty_world.launch";
    };
    
   component robot_state_publisher : ROSNodeCompT = new ROSNodeCompT extended with {
             port _joint_states_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "sensor_msgs/JointState";
        property topic = "/joint_states";
    };
    
        property name = "robot_state_publisher";
        property launchedBy = "/ros_ws/src/husky/husky_control/launch/control.launch";
    };
    
   component ekf_localization : ROSNodeCompT = new ROSNodeCompT extended with {
             port _accel_filtered_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_messages/AccelWithCovarianceStamped";
        property topic = "/accel/filtered";
    };
    
     port _odometry_filtered_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/Odometry";
        property topic = "/odometry/filtered";
    };
    
     port _husky_velocity_controller_odom_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "nav_msgs/Odometry";
        property topic = "/husky_velocity_controller/odom";
    };
    
     port _imu_data_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "sensor_msgs//Imu";
        property topic = "/imu/data";
    };
    
     port _cmd_vel_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "geometry_msgs::Twist";
        property topic = "/cmd_vel";
    };
    
     port _set_pose_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "geometry_msgs/PoseWithCovarianceStamped";
        property topic = "/set_pose";
    };
    
     port _ekf_localization_enable_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/ekf_localization/enable";
        property args : string = "";
    };
    
     port _ekf_localization_set_pose_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "geometry_msgs/PoseWithCovarianceStamped";
        property name : string = "/ekf_localization/set_pose";
        property args : string = "";
    };
    
     port _ekf_localization_toggle_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "robot_localization/ToggleFilterProcessing";
        property name : string = "/ekf_localization/toggle";
        property args : string = "";
    };
    
        property name = "ekf_localization";
        property launchedBy = "/ros_ws/src/husky/husky_control/launch/control.launch";
    };
    
   component spawn_husky_model : ROSNodeCompT = new ROSNodeCompT extended with {
             port _gazebo_model_states_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "gazebo_msgs/ModelStates";
        property topic = "/gazebo/model_states";
    };
    
     port _gazebo_delete_model_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/gazebo/delete_model";
        property svc_type : string = "gazebo_msgs/DeleteModel";
        property persistency : ServicePersistencyT = non-persistent;
    };
    
     port _gazebo_spawn_sdf_model_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/gazebo/spawn_sdf_model";
        property svc_type : string = "gazebo_msgs/SpawnModel";
        property persistency : ServicePersistencyT = non-persistent;
    };
    
     port _gazebo_set_model_configuration_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/gazebo/set_model_configuration";
        property svc_type : string = "gazebo_msgs/SetModelConfiguration";
        property persistency : ServicePersistencyT = non-persistent;
    };
    
     port _gazebo_unpause_physics_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/gazebo/unpause_physics";
        property svc_type : string = "std_srvs/Empty";
        property persistency : ServicePersistencyT = non-persistent;
    };
    
     port _gazebo_spawn_urdf_model_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/gazebo/spawn_urdf_model";
        property svc_type : string = "gazebo_msgs/SpawnModel";
        property persistency : ServicePersistencyT = non-persistent;
    };
    
        property name = "spawn_husky_model";
        property launchedBy = "/ros_ws/src/husky/husky_gazebo/launch/spawn_husky.launch";
    };
    
   component twist_marker_server : ROSNodeCompT = new ROSNodeCompT extended with {
             port _twist_marker_server_cmd_vel_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/Twist";
        property topic = "/twist_marker_server/cmd_vel";
    };
    
        property name = "twist_marker_server";
        property launchedBy = "/ros_ws/src/husky/husky_control/launch/control.launch";
    };
    
   component gazebo_gui : ROSNodeCompT = new ROSNodeCompT extended with {
        
        property name = "gazebo_gui";
        property launchedBy = "/ros_ws/src/gazebo_ros_pkgs/gazebo_ros/launch/empty_world.launch";
    };
       connector _cmd_vel_conn : TopicConnectorT = new TopicConnectorT extended with {
         role move_base_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role twist_mux_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
    role ekf_localization_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
    role gazebo_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "geometry_msgs/Twist";
        property topic = "/cmd_vel";
    };
    
   connector _odom_conn : TopicConnectorT = new TopicConnectorT extended with {
         role gazebo_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role move_base_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "nav_msgs/Odometry";
        property topic = "/odom";
    };
    
   connector _map_conn : TopicConnectorT = new TopicConnectorT extended with {
         role map_server_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role amcl_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "nav_msgs/OccupancyGrid";
        property topic = "/map";
    };
    
   connector _twist_marker_server_cmd_vel_conn : TopicConnectorT = new TopicConnectorT extended with {
         role twist_marker_server_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role twist_mux_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "any";
        property topic = "/twist_marker_server/cmd_vel";
    };
    
   connector _gazebo_model_states_conn : TopicConnectorT = new TopicConnectorT extended with {
         role gazebo_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role spawn_husky_model_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "gazebo_msgs/ModelStates";
        property topic = "/gazebo/model_states";
    };
    
   connector _joint_states_conn : TopicConnectorT = new TopicConnectorT extended with {
         role gazebo_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role robot_state_publisher_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "sensor_msgs::JointState";
        property topic = "/joint_states";
    };
    
   connector _imu_data_conn : TopicConnectorT = new TopicConnectorT extended with {
         role gazebo_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role ekf_localization_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "sensor_msgs/Imu";
        property topic = "/imu/data";
    };
    
  connector _static_map_conn : ServiceConnT = new ServiceConnT extended with {
         role map_server__static_map_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role amcl__static_map_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
   
  connector _controller_manager_load_controller_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__controller_manager_load_controller_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role base_controller_spawner__controller_manager_load_controller_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
   
  connector _controller_manager_switch_controller_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__controller_manager_switch_controller_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role base_controller_spawner__controller_manager_switch_controller_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
   
  connector _controller_manager_unload_controller_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__controller_manager_unload_controller_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role base_controller_spawner__controller_manager_unload_controller_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
   
  connector _gazebo_delete_model_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__gazebo_delete_model_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role spawn_husky_model__gazebo_delete_model_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
   
  connector _gazebo_unpause_physics_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__gazebo_unpause_physics_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role spawn_husky_model__gazebo_unpause_physics_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
   
  connector _gazebo_spawn_sdf_model_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__gazebo_spawn_sdf_model_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role spawn_husky_model__gazebo_spawn_sdf_model_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
   
  connector _gazebo_set_model_configuration_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__gazebo_set_model_configuration_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role spawn_husky_model__gazebo_set_model_configuration_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
   
  connector _gazebo_spawn_urdf_model_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__gazebo_spawn_urdf_model_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role spawn_husky_model__gazebo_spawn_urdf_model_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
     attachment move_base._cmd_vel_pub to _cmd_vel_conn.move_base_pub;
  attachment twist_mux._cmd_vel_sub to _cmd_vel_conn.twist_mux_sub;
  attachment gazebo._cmd_vel_sub to _cmd_vel_conn.gazebo_sub;
  attachment ekf_localization._cmd_vel_sub to _cmd_vel_conn.ekf_localization_sub;
  attachment move_base._odom_sub to _odom_conn.move_base_sub;
  attachment gazebo._odom_pub to _odom_conn.gazebo_pub;
  attachment amcl._map_sub to _map_conn.amcl_sub;
  attachment map_server._map_pub to _map_conn.map_server_pub;
  attachment twist_mux._twist_marker_server_cmd_vel_sub to _twist_marker_server_cmd_vel_conn.twist_mux_sub;
  attachment twist_marker_server._twist_marker_server_cmd_vel_pub to _twist_marker_server_cmd_vel_conn.twist_marker_server_pub;
  attachment gazebo._gazebo_model_states_pub to _gazebo_model_states_conn.gazebo_pub;
  attachment spawn_husky_model._gazebo_model_states_sub to _gazebo_model_states_conn.spawn_husky_model_sub;
  attachment gazebo._joint_states_pub to _joint_states_conn.gazebo_pub;
  attachment robot_state_publisher._joint_states_sub to _joint_states_conn.robot_state_publisher_sub;
  attachment gazebo._imu_data_pub to _imu_data_conn.gazebo_pub;
  attachment ekf_localization._imu_data_sub to _imu_data_conn.ekf_localization_sub;
  attachment map_server._static_map_svc to _static_map_conn.map_server__static_map_svc;
  attachment amcl._static_map_call to _static_map_conn.amcl__static_map_call;
  attachment gazebo._controller_manager_load_controller_svc to _controller_manager_load_controller_conn.gazebo__controller_manager_load_controller_svc;
  attachment base_controller_spawner._controller_manager_load_controller_call to _controller_manager_load_controller_conn.base_controller_spawner__controller_manager_load_controller_call;
  attachment gazebo._controller_manager_switch_controller_svc to _controller_manager_switch_controller_conn.gazebo__controller_manager_switch_controller_svc;
  attachment base_controller_spawner._controller_manager_switch_controller_call to _controller_manager_switch_controller_conn.base_controller_spawner__controller_manager_switch_controller_call;
  attachment gazebo._controller_manager_unload_controller_svc to _controller_manager_unload_controller_conn.gazebo__controller_manager_unload_controller_svc;
  attachment base_controller_spawner._controller_manager_unload_controller_call to _controller_manager_unload_controller_conn.base_controller_spawner__controller_manager_unload_controller_call;
  attachment gazebo._gazebo_delete_model_svc to _gazebo_delete_model_conn.gazebo__gazebo_delete_model_svc;
  attachment spawn_husky_model._gazebo_delete_model_call to _gazebo_delete_model_conn.spawn_husky_model__gazebo_delete_model_call;
  attachment gazebo._gazebo_unpause_physics_svc to _gazebo_unpause_physics_conn.gazebo__gazebo_unpause_physics_svc;
  attachment spawn_husky_model._gazebo_unpause_physics_call to _gazebo_unpause_physics_conn.spawn_husky_model__gazebo_unpause_physics_call;
  attachment gazebo._gazebo_spawn_sdf_model_svc to _gazebo_spawn_sdf_model_conn.gazebo__gazebo_spawn_sdf_model_svc;
  attachment spawn_husky_model._gazebo_spawn_sdf_model_call to _gazebo_spawn_sdf_model_conn.spawn_husky_model__gazebo_spawn_sdf_model_call;
  attachment gazebo._gazebo_set_model_configuration_svc to _gazebo_set_model_configuration_conn.gazebo__gazebo_set_model_configuration_svc;
  attachment spawn_husky_model._gazebo_set_model_configuration_call to _gazebo_set_model_configuration_conn.spawn_husky_model__gazebo_set_model_configuration_call;
  attachment gazebo._gazebo_spawn_urdf_model_svc to _gazebo_spawn_urdf_model_conn.gazebo__gazebo_spawn_urdf_model_svc;
  attachment spawn_husky_model._gazebo_spawn_urdf_model_call to _gazebo_spawn_urdf_model_conn.spawn_husky_model__gazebo_spawn_urdf_model_call;}