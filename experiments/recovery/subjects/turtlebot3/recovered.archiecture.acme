import families/ROSFam.acme;
system _home_tdurschm_rosdiscover-evaluation_experiments_recovery_subjects_turtlebot3_recovered_archiecture : ROSFam = new ROSFam extended with {
   component turtlebot3_lds : ROSNodeCompT = new ROSNodeCompT extended with {
             port _scan_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "sensor_msgs::LaserScan_";
        property topic = "/scan";
    };
    
     port _rpms_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "std_msgs::UInt16_";
        property topic = "/rpms";
    };
    
        property name = "turtlebot3_lds";
        property launchedBy = "/ros_ws/src/turtlebot3/turtlebot3_bringup/launch/turtlebot3_lidar.launch";
    };
    
   component turtlebot3_core : ROSNodeCompT, PlaceholderT = new ROSNodeCompT, PlaceholderT extended with {
        
        property name = "turtlebot3_core";
        property placeholder = true;
        property launchedBy = "/ros_ws/src/turtlebot3/turtlebot3_bringup/launch/turtlebot3_core.launch";
    };

   component turtlebot3_diagnostics : ROSNodeCompT = new ROSNodeCompT extended with {
             port _version_info_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "turtlebot3_msgs::VersionInfo_";
        property topic = "/version_info";
    };
    
     port _diagnostics_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "diagnostic_msgs::DiagnosticArray_";
        property topic = "/diagnostics";
    };
    
     port _scan_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "sensor_msgs/LaserScan_";
        property topic = "/scan";
    };
    
     port _imu_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "sensor_msgs/Imu_";
        property topic = "/imu";
    };
    
     port _firmware_version_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "turtlebot3_msgs/VersionInfo_";
        property topic = "/firmware_version";
    };
    
     port _sensor_state_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "turtlebot3_msgs/SensorState_";
        property topic = "/sensor_state";
    };
    
        property name = "turtlebot3_diagnostics";
        property launchedBy = "/ros_ws/src/turtlebot3/turtlebot3_bringup/launch/turtlebot3_robot.launch";
    };
    
   component move_base : ROSNodeCompT = new ROSNodeCompT extended with {
             port _cmd_vel_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/Twist";
        property topic = "/cmd_vel";
    };
    
     port _move_base_global_costmap_costmap_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/OccupancyGrid";
        property topic = "/move_base/global_costmap/costmap";
    };
    
     port _move_base_local_costmap_costmap_updates_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/OccupancyGridUpdate";
        property topic = "/move_base/local_costmap/costmap_updates";
    };
    
     port _move_base_NavfnROS_plan_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/Path";
        property topic = "/move_base/NavfnROS/plan";
    };
    
     port _move_base_DWAPlannerROS_global_plan_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/Path";
        property topic = "/move_base/DWAPlannerROS/global_plan";
    };
    
     port _move_base_global_costmap_voxel_grid_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "costmap_2d/VoxelGrid";
        property topic = "/move_base/global_costmap/voxel_grid";
    };
    
     port _move_base_DWAPlannerROS_local_plan_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/Path";
        property topic = "/move_base/DWAPlannerROS/local_plan";
    };
    
     port _move_base_local_costmap_costmap_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/OccupancyGrid";
        property topic = "/move_base/local_costmap/costmap";
    };
    
     port _move_base_local_costmap_voxel_grid_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "costmap_2d/VoxelGrid";
        property topic = "/move_base/local_costmap/voxel_grid";
    };
    
     port _move_base_global_costmap_costmap_updates_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/OccupancyGridUpdate";
        property topic = "/move_base/global_costmap/costmap_updates";
    };
    
     port _move_base_current_goal_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/PoseStamped";
        property topic = "/move_base/current_goal";
    };
    
     port _move_base_local_costmap_footprint_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "geometry_msgs/Polygon";
        property topic = "/move_base/local_costmap/footprint";
    };
    
     port _move_base_simple_goal_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "geometry_msgs/PoseStamped";
        property topic = "/move_base_simple/goal";
    };
    
     port _odom_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "nav_msgs/Odometry";
        property topic = "/odom";
    };
    
     port _move_base_global_costmap_footprint_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "geometry_msgs/Polygon";
        property topic = "/move_base/global_costmap/footprint";
    };
    
     port _clear_unknown_space_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/clear_unknown_space";
        property args : string = "";
    };
    
     port _make_plan_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "nav_msgs/GetPlan";
        property name : string = "/make_plan";
        property args : string = "";
    };
    
     port _clear_costmaps_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/clear_costmaps";
        property args : string = "";
    };
    
    port _move_base_srvr: ActionServerPortT = new ActionServerPortT extended with {
        property action_type : string = "move_base_msgs/MoveBaseAction";
    };
    
        property name = "move_base";
        property launchedBy = "/ros_ws/src/turtlebot3/turtlebot3_navigation/launch/move_base.launch";
    };
    
   component amcl : ROSNodeCompT = new ROSNodeCompT extended with {
             port _particlecloud_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/PoseArray";
        property topic = "/particlecloud";
    };
    
     port _amcl_parameter_descriptions_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "dynamic_reconfigure/ConfigDescription";
        property topic = "/amcl/parameter_descriptions";
    };
    
     port _amcl_parameter_updates_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "dynamic_reconfigure/Config";
        property topic = "/amcl/parameter_updates";
    };
    
     port _amcl_pose_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/PoseWithCovarianceStamped";
        property topic = "/amcl_pose";
    };
    
     port _map_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "nav_msgs/OccupancyGrid";
        property topic = "/map";
    };
    
     port _initialpose_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "geometry_msgs/PoseWithCovarianceStamped";
        property topic = "/initialpose";
    };
    
     port _scan_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "sensor_msgs/LaserScan";
        property topic = "/scan";
    };
    
     port _global_localization_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/global_localization";
        property args : string = "";
    };
    
     port _set_map_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "nav_msgs/SetMap";
        property name : string = "/set_map";
        property args : string = "";
    };
    
     port _request_nomotion_update_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/request_nomotion_update";
        property args : string = "";
    };
    
        property name = "amcl";
        property launchedBy = "/ros_ws/src/turtlebot3/turtlebot3_navigation/launch/amcl.launch";
    };
    
   component robot_state_publisher : ROSNodeCompT = new ROSNodeCompT extended with {
             port _tf_static_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "tf2_msgs/TFMessage";
        property topic = "/tf_static";
    };
    
     port _tf_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "tf2_msgs/TFMessage";
        property topic = "/tf";
    };
    
     port _joint_states_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "sensor_msgs/JointState";
        property topic = "/joint_states";
    };
    
        property name = "robot_state_publisher";
        property launchedBy = "/ros_ws/src/turtlebot3/turtlebot3_bringup/launch/turtlebot3_remote.launch";
    };
    
   component rviz : ROSNodeCompT = new ROSNodeCompT extended with {
             port _visualization_marker_array_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "visualization_msgs/MarkerArray";
        property topic = "/visualization_marker_array";
    };
    
     port _reload_shaders_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/reload_shaders";
        property args : string = "";
    };
    
        property name = "rviz";
        property launchedBy = "/ros_ws/src/turtlebot3/turtlebot3_navigation/launch/turtlebot3_navigation.launch";
    };
    
   component map_server : ROSNodeCompT = new ROSNodeCompT extended with {
             port _map_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/OccupancyGrid";
        property topic = "/map";
    };
    
     port _map_metadata_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/MapMetaData";
        property topic = "/map_metadata";
    };
    
     port _static_map_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "nav_msgs/GetMap";
        property name : string = "/static_map";
        property args : string = "";
    };
    
        property name = "map_server";
        property launchedBy = "/ros_ws/src/turtlebot3/turtlebot3_navigation/launch/turtlebot3_navigation.launch";
    };
    
   component gazebo_gui : ROSNodeCompT = new ROSNodeCompT extended with {
             port _gazebo_gui_parameter_description_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "dynamic_recongfigure/ConfigDescription";
        property topic = "/gazebo_gui/parameter_description";
    };
    
     port _gazebo_gui_parameter_updates_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "dynamic_reconfigure/Config";
        property topic = "/gazebo_gui/parameter_updates";
    };
    
     port _clock_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "rosgraph_msgs/Clock";
        property topic = "/clock";
    };
    
     port _gazebo_gui_set_parameters_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "unknown type";
        property name : string = "/gazebo_gui/set_parameters";
        property args : string = "";
    };
    
        property name = "gazebo_gui";
        property launchedBy = "/ros_ws/src/gazebo_ros_pkgs/gazebo_ros/launch/empty_world.launch";
    };
    
   component spawn_urdf : ROSNodeCompT = new ROSNodeCompT extended with {
             port _gazebo_model_states_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "gazebo_msgs/ModelStates";
        property topic = "/gazebo/model_states";
    };
    
     port _gazebo_spawn_sdf_model_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/gazebo/spawn_sdf_model";
        property svc_type : string = "gazebo_msgs/SpawnModel";
        property persistency : boolean = false;
    };
    
     port _gazebo_unpause_physics_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/gazebo/unpause_physics";
        property svc_type : string = "std_srvs/Empty";
        property persistency : boolean = false;
    };
    
     port _gazebo_delete_model_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/gazebo/delete_model";
        property svc_type : string = "gazebo_msgs/DeleteModel";
        property persistency : boolean = false;
    };
    
     port _gazebo_set_model_configuration_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/gazebo/set_model_configuration";
        property svc_type : string = "gazebo_msgs/SetModelConfiguration";
        property persistency : boolean = false;
    };
    
     port _gazebo_spawn_urdf_model_call : ServiceClientPortT = new ServiceClientPortT extended with {
        property name : string = "/gazebo/spawn_urdf_model";
        property svc_type : string = "gazebo_msgs/SpawnModel";
        property persistency : boolean = false;
    };
    
        property name = "spawn_urdf";
        property launchedBy = "/ros_ws/src/turtlebot3_simulations/turtlebot3_gazebo/launch/turtlebot3_empty_world.launch";
    };
    
   component gazebo : ROSNodeCompT = new ROSNodeCompT extended with {
             port _cmd_vel_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "geometry_msgs/Twist";
        property topic = "/cmd_vel";
    };
    
     port _gazebo_factory_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "gazebo_msgs/Factory";
        property topic = "/gazebo/factory";
    };
    
     port _gazebo_link_states_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "gazebo_msgs/LinkState";
        property topic = "/gazebo/link_states";
    };
    
     port _gazebo_factory_light_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "gazebo_msgs/Light";
        property topic = "/gazebo/factory/light";
    };
    
     port _gazebo_request_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "gazebo_msgs/Request";
        property topic = "/gazebo/request";
    };
    
     port _joint_states_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "sensor_msgs/JointState";
        property topic = "/joint_states";
    };
    
     port _gazebo_light_modify_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "gazebo_msgs/Light";
        property topic = "/gazebo/light/modify";
    };
    
     port _imu_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "sensor_msgs/Imu";
        property topic = "/imu";
    };
    
     port _scan_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "sensor_msgs/LaserScan";
        property topic = "/scan";
    };
    
     port _odom_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "nav_msgs/Odometry";
        property topic = "/odom";
    };
    
     port _gazebo_model_states_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "gazebo_msgs/ModelStates";
        property topic = "/gazebo/model_states";
    };
    
     port _clock_pub : TopicAdvertisePortT = new TopicAdvertisePortT extended with {
        property msg_type = "rosgraph_msgs/Clock";
        property topic = "/clock";
    };
    
     port _gazebo_response_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "gazebo_msgs/Response";
        property topic = "/gazebo/response";
    };
    
     port _gazebo_set_model_state_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "gazebo_msgs/ModelState";
        property topic = "/gazebo/set_model_state";
    };
    
     port _gazebo_set_link_state_sub : TopicSubscribePortT = new TopicSubscribePortT extended with {
        property msg_type = "gazebo_msgs/LinkState";
        property topic = "/gazebo/set_link_state";
    };
    
     port _gazebo_clear_body_wrenches_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/BodyRequest";
        property name : string = "/gazebo/clear_body_wrenches";
        property args : string = "";
    };
    
     port _imu_service_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/imu_service";
        property args : string = "";
    };
    
     port _gazebo_set_model_state_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SetModelState";
        property name : string = "/gazebo/set_model_state";
        property args : string = "";
    };
    
     port _gazebo_set_physics_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SetPhysicsProperties";
        property name : string = "/gazebo/set_physics_properties";
        property args : string = "";
    };
    
     port _gazebo_reset_simulation_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/gazebo/reset_simulation";
        property args : string = "";
    };
    
     port _gazebo_get_model_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetModelProperties";
        property name : string = "/gazebo/get_model_properties";
        property args : string = "";
    };
    
     port _gazebo_get_link_state_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetLinkState";
        property name : string = "/gazebo/get_link_state";
        property args : string = "";
    };
    
     port _gazebo_get_light_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetLightProperties";
        property name : string = "/gazebo/get_light_properties";
        property args : string = "";
    };
    
     port _gazebo_delete_model_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/DeleteModel";
        property name : string = "/gazebo/delete_model";
        property args : string = "";
    };
    
     port _gazebo_get_model_state_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetModelState";
        property name : string = "/gazebo/get_model_state";
        property args : string = "";
    };
    
     port _gazebo_set_model_configuration_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SetModelConfiguration";
        property name : string = "/gazebo/set_model_configuration";
        property args : string = "";
    };
    
     port _gazebo_set_light_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SetLightProperties";
        property name : string = "/gazebo/set_light_properties";
        property args : string = "";
    };
    
     port _gazebo_set_joint_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SetJointProperties";
        property name : string = "/gazebo/set_joint_properties";
        property args : string = "";
    };
    
     port _gazebo_delete_light_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/DeleteLight";
        property name : string = "/gazebo/delete_light";
        property args : string = "";
    };
    
     port _gazebo_unpause_physics_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/gazebo/unpause_physics";
        property args : string = "";
    };
    
     port _gazebo_apply_body_wrench_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/ApplyBodyWrench";
        property name : string = "/gazebo/apply_body_wrench";
        property args : string = "";
    };
    
     port _gazebo_reset_world_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "std_srvs/Empty";
        property name : string = "/gazebo/reset_world";
        property args : string = "";
    };
    
     port _gazebo_get_link_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetLinkProperties";
        property name : string = "/gazebo/get_link_properties";
        property args : string = "";
    };
    
     port _gazebo_get_world_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetWorldProperties";
        property name : string = "/gazebo/get_world_properties";
        property args : string = "";
    };
    
     port _gazebo_set_link_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SetLinkProperties";
        property name : string = "/gazebo/set_link_properties";
        property args : string = "";
    };
    
     port _gazebo_spawn_sdf_model_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SpawnModel";
        property name : string = "/gazebo/spawn_sdf_model";
        property args : string = "";
    };
    
     port _gazebo_apply_joint_effort_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/ApplyJointEffort";
        property name : string = "/gazebo/apply_joint_effort";
        property args : string = "";
    };
    
     port _gazebo_get_physics_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetPhysicsProperties";
        property name : string = "/gazebo/get_physics_properties";
        property args : string = "";
    };
    
     port _gazebo_clear_joint_forces_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/JointRequest";
        property name : string = "/gazebo/clear_joint_forces";
        property args : string = "";
    };
    
     port _gazebo_spawn_urdf_model_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/SpawnModel";
        property name : string = "/gazebo/spawn_urdf_model";
        property args : string = "";
    };
    
     port _gazebo_get_joint_properties_svc : ServiceProviderPortT = new ServiceProviderPortT extended with {
        property svc_type : string = "gazebo_msgs/GetJointProperties";
        property name : string = "/gazebo/get_joint_properties";
        property args : string = "";
    };
    
        property name = "gazebo";
        property launchedBy = "/ros_ws/src/gazebo_ros_pkgs/gazebo_ros/launch/empty_world.launch";
    };
       connector _scan_conn : TopicConnectorT = new TopicConnectorT extended with {
         role turtlebot3_lds_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
     role gazebo_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role amcl_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
    role turtlebot3_diagnostics_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "sensor_msgs::LaserScan_";
        property topic = "/scan";
    };
    
   connector _imu_conn : TopicConnectorT = new TopicConnectorT extended with {
         role gazebo_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role turtlebot3_diagnostics_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "sensor_msgs/Imu_";
        property topic = "/imu";
    };
    
   connector _cmd_vel_conn : TopicConnectorT = new TopicConnectorT extended with {
         role gazebo_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
     role move_base_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
        property msg_type = "geometry_msgs/Twist";
        property topic = "/cmd_vel";
    };
    
   connector _odom_conn : TopicConnectorT = new TopicConnectorT extended with {
         role gazebo_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role move_base_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "nav_msgs/Odometry";
        property topic = "/odom";
    };
    
   connector _map_conn : TopicConnectorT = new TopicConnectorT extended with {
         role map_server_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role amcl_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "nav_msgs/OccupancyGrid";
        property topic = "/map";
    };
    
   connector _joint_states_conn : TopicConnectorT = new TopicConnectorT extended with {
         role gazebo_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role robot_state_publisher_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "sensor_msgs/JointState";
        property topic = "/joint_states";
    };
    
   connector _clock_conn : TopicConnectorT = new TopicConnectorT extended with {
         role gazebo_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role gazebo_gui_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "rosgraph_msgs/Clock";
        property topic = "/clock";
    };
    
   connector _gazebo_model_states_conn : TopicConnectorT = new TopicConnectorT extended with {
         role gazebo_pub : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT;
    
    role spawn_urdf_sub : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT;
    
        property msg_type = "gazebo_msgs/ModelStates";
        property topic = "/gazebo/model_states";
    };
    
  connector _gazebo_spawn_sdf_model_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__gazebo_spawn_sdf_model_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role spawn_urdf__gazebo_spawn_sdf_model_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
   
  connector _gazebo_unpause_physics_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__gazebo_unpause_physics_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role spawn_urdf__gazebo_unpause_physics_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
   
  connector _gazebo_delete_model_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__gazebo_delete_model_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role spawn_urdf__gazebo_delete_model_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
   
  connector _gazebo_set_model_configuration_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__gazebo_set_model_configuration_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role spawn_urdf__gazebo_set_model_configuration_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
   
  connector _gazebo_spawn_urdf_model_conn : ServiceConnT = new ServiceConnT extended with {
         role gazebo__gazebo_spawn_urdf_model_svc : ROSServiceResponderRoleT = new ROSServiceResponderRoleT;
    
       role spawn_urdf__gazebo_spawn_urdf_model_call : ROSServiceCallerRoleT = new ROSServiceCallerRoleT;
    

    };
     attachment turtlebot3_lds._scan_pub to _scan_conn.turtlebot3_lds_pub;
  attachment turtlebot3_diagnostics._scan_sub to _scan_conn.turtlebot3_diagnostics_sub;
  attachment amcl._scan_sub to _scan_conn.amcl_sub;
  attachment gazebo._scan_pub to _scan_conn.gazebo_pub;
  attachment turtlebot3_diagnostics._imu_sub to _imu_conn.turtlebot3_diagnostics_sub;
  attachment gazebo._imu_pub to _imu_conn.gazebo_pub;
  attachment move_base._cmd_vel_pub to _cmd_vel_conn.move_base_pub;
  attachment gazebo._cmd_vel_pub to _cmd_vel_conn.gazebo_pub;
  attachment move_base._odom_sub to _odom_conn.move_base_sub;
  attachment gazebo._odom_pub to _odom_conn.gazebo_pub;
  attachment amcl._map_sub to _map_conn.amcl_sub;
  attachment map_server._map_pub to _map_conn.map_server_pub;
  attachment robot_state_publisher._joint_states_sub to _joint_states_conn.robot_state_publisher_sub;
  attachment gazebo._joint_states_pub to _joint_states_conn.gazebo_pub;
  attachment gazebo_gui._clock_sub to _clock_conn.gazebo_gui_sub;
  attachment gazebo._clock_pub to _clock_conn.gazebo_pub;
  attachment spawn_urdf._gazebo_model_states_sub to _gazebo_model_states_conn.spawn_urdf_sub;
  attachment gazebo._gazebo_model_states_pub to _gazebo_model_states_conn.gazebo_pub;
  attachment gazebo._gazebo_spawn_sdf_model_svc to _gazebo_spawn_sdf_model_conn.gazebo__gazebo_spawn_sdf_model_svc;
  attachment spawn_urdf._gazebo_spawn_sdf_model_call to _gazebo_spawn_sdf_model_conn.spawn_urdf__gazebo_spawn_sdf_model_call;
  attachment gazebo._gazebo_unpause_physics_svc to _gazebo_unpause_physics_conn.gazebo__gazebo_unpause_physics_svc;
  attachment spawn_urdf._gazebo_unpause_physics_call to _gazebo_unpause_physics_conn.spawn_urdf__gazebo_unpause_physics_call;
  attachment gazebo._gazebo_delete_model_svc to _gazebo_delete_model_conn.gazebo__gazebo_delete_model_svc;
  attachment spawn_urdf._gazebo_delete_model_call to _gazebo_delete_model_conn.spawn_urdf__gazebo_delete_model_call;
  attachment gazebo._gazebo_set_model_configuration_svc to _gazebo_set_model_configuration_conn.gazebo__gazebo_set_model_configuration_svc;
  attachment spawn_urdf._gazebo_set_model_configuration_call to _gazebo_set_model_configuration_conn.spawn_urdf__gazebo_set_model_configuration_call;
  attachment gazebo._gazebo_spawn_urdf_model_svc to _gazebo_spawn_urdf_model_conn.gazebo__gazebo_spawn_urdf_model_svc;
  attachment spawn_urdf._gazebo_spawn_urdf_model_call to _gazebo_spawn_urdf_model_conn.spawn_urdf__gazebo_spawn_urdf_model_call;}